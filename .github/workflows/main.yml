name: CI/CD & Semantic Versioning

on:
  push:
    branches:
      - '**'
  pull_request:

jobs:
  ci-cd:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # ==========================
      # Linting
      # ==========================
      - name: Install linters
        run: npm install -g htmlhint stylelint eslint

      - name: Lint HTML
        run: htmlhint "**/*.html"

      - name: Lint CSS
        run: stylelint "**/*.css" || true

      - name: Lint JS
        run: eslint "**/*.js" || true

      # ==========================
      # Detect semantic version bump
      # ==========================
      - name: Get last Git tag
        id: get_tag
        run: |
          git fetch --tags
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "LAST_TAG=$LAST_TAG" >> $GITHUB_ENV

      - name: Determine bump type from commits
        id: semver
        run: |
          COMMITS=$(git log ${{ env.LAST_TAG }}..HEAD --pretty=format:"%s")
          echo "$COMMITS"
          BUMP_TYPE=""
          if echo "$COMMITS" | grep -qE "BREAKING CHANGE|!"; then
            BUMP_TYPE="major"
          elif echo "$COMMITS" | grep -q "^feat:"; then
            BUMP_TYPE="minor"
          elif echo "$COMMITS" | grep -q "^fix:"; then
            BUMP_TYPE="patch"
          fi

          if [ -z "$BUMP_TYPE" ]; then
            echo "SKIP_BUMP=true" >> $GITHUB_ENV
          else
            echo "BUMP_TYPE=$BUMP_TYPE" >> $GITHUB_ENV
          fi

      # ==========================
      # Conditional auto bump
      # ==========================
      - name: Confirm PR for version bump
        if: github.event_name == 'pull_request' && env.SKIP_BUMP != 'true'
        uses: hmarr/auto-approve-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Bump version & tag
        if: env.SKIP_BUMP != 'true' && github.event_name != 'pull_request'
        run: |
          LAST_VERSION=${{ env.LAST_TAG }}
          BUMP=${{ env.BUMP_TYPE }}
          NEW_VERSION=$(npx semver -i $BUMP $LAST_VERSION)
          echo "New version: $NEW_VERSION"

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag $NEW_VERSION
          git push origin $NEW_VERSION

          # Update README.md version
          if grep -q "Version:" README.md; then
            sed -i "s/Version: .*/Version: $NEW_VERSION/" README.md
          else
            echo -e "\n## Version\nVersion: $NEW_VERSION" >> README.md
          fi
          git add README.md
          git commit -m "Update README for $NEW_VERSION" || echo "No changes to commit"
          git push || true

      # ==========================
      # Cleanup duplicate & temp files (confirmation required)
      # ==========================
      - name: Confirm PR for cleanup
        if: github.event_name == 'pull_request'
        uses: hmarr/auto-approve-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Remove unnecessary files
        run: |
          find . -type f -name "*~" -delete
          find . -type f -name "*.bak" -delete
          find . -type f -name "*.tmp" -delete
        if: github.event_name != 'pull_request'

      # ==========================
      # Build
      # ==========================
      - name: Build project
        run: |
          rm -rf build
          mkdir build
          cp -r *.html build/ || true
          cp -r assets build/ || true
          zip -r workdays-${GITHUB_SHA::8}.zip build/

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: workdays-build
          path: workdays-${GITHUB_SHA::8}.zip

      # ==========================
      # Deploy
      # ==========================
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./
          clean: true
          
